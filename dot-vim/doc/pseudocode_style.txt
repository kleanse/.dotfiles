*pseudocode_style.txt*	Last change: 2025 Feb 05

			  Pseudocode style reference

This document details one style for writing pseudocode. A list of keywords,
statement syntax, and an example piece of pseudocode showcasing all of the
keywords and syntax are included. Although the style presented acts as a
guideline for writing pseudocode, it is not appropriate for every person or
situation; adapting it to be more or less strict or verbose as needed is
encouraged.

1. Keywords		    |pseudocode-keywords|
2. Syntax		    |pseudocode-syntax|
   2.1 Statements		|pseudocode-statements|
   2.2 Expressions		|pseudocode-expressions|
   2.3 Control structures	|pseudocode-control|
   2.4 Data structures		|pseudocode-data|
   2.5 Comments			|pseudocode-comments|
3. Sample pseudocode	    |pseudocode-sample|

==============================================================================
1. Keywords						*pseudocode-keywords*

The following table lists keywords for this pseudocode style lexically from
left to right:

	and	break	do	downto		echo
	else	end	false	for		if
	in	not	or	procedure	return
	then	to	true	while

Keywords should be bold in a rich text document.

==============================================================================
2. Syntax						*pseudocode-syntax*

2.1 Statements ~
						       *pseudocode-statements*
Statements comprise those defined in traditional programming and natural
languages. Thus, there is a lot of freedom in writing pseudocode statements.
As pseudocode aims for comprehension rather than preciseness, intuitive
high-level statements are recommended. For example, the statement

	Add word to a queue Q

is readily understandable; however, for an actual implementation, it omits
many necessary, often low-level, details: defining a "word", finding and
getting a word from a source, and constructing a queue.

2.2 Expressions ~
						      *pseudocode-expressions*
The definition of an expression follows that of the C++ programming language
(see https://en.cppreference.com/w/cpp/language/expressions ).

Data Types ~

The default for data type declaration is this: if a variable's type can be
inferred from its initialization value, then do not declare it. Otherwise,
declare the variable's data type. For example,

	i <- 2                     // i is an integer
	f <- 3.14                  // f is a float
	b <- false                 // b is a Boolean
	Enqueue word to Q          // Error: type of Q cannot be deduced
	Enqueue word to a queue Q  // Q is a queue

The third example is considered a type error if Q had not yet been declared.

Printing ~

The `echo` keyword is used to output the value of an expression: >

	echo "Hello, world!"
<	Hello, world!

It outputs a newline at the end automatically: >

	echo "Hello, world!"
	echo "I'm on a newline"
<	Hello, world!
	I'm on a newline

And it can accept multiple arguments: >

	echo 1 "Hello, world!" variable
<	1 Hello, world! 3.1415

In this case, expressions are echoed in the order they are specified with
spaces separating them.

Implicitly, all expressions are converted to the string data type before being
echoed. This behavior allows numbers to be echoed without quoting them and
non-string variables to be supplied (so long as their conversions to the
string type are intuitive or mentioned explicitly at their outsets).

`echo` is a quick way for showing values, but it's not intended for formatted
output. For that, use `printf` [which is identical to the C function printf()]: >

	printf("%d * %d = %d\n", 7, 14, 7 * 14)
<	7 * 14 = 98

`printf` may also be used in the same format as `echo`: >

	printf "%d째C = %.1f째F\n"  37  37.0 / 5 * 9 + 32
<	37째C = 98.6째F

2.3 Control structures ~
							  *pseudocode-control*
>
	if {condition} then
		{statement}
	else if {condition} then
		{statement}
	else
		{statement}
	end if

The latter two conditional branches are optional. >

	for {range} do
		{statement}
	end for

	for {var} in {object} do
		{statement}
	end for

`{range}` can be ascending (`to`) or descending (`downto`). The keywords
`to` and `downto` are inclusive:

	`i <- 0 to 9`      // i increments from 0 to 9 and ends with 10
	`i <- 9 downto 0`  // i decrements from 9 to 0 and ends with -1

`{object}` must be an expression representing a sequence (e.g., array) or be a
list-like object. `{var}` is the variable iterating over the items in
`{object}`, being assigned the value of the current item per loop iteration. >

	while {condition} do
		{statement}
	end while

	do
		{statement}
	while {condition}

Note: do-while does not use the `end` keyword. >

	procedure {name}({parameters})
		{statement}
	end procedure

2.5 Data structures ~
							 *pseudocode-data*
Two data structures can be declared using special syntax: lists and
dictionaries.

Lists are created using square brackets: >

	list1 <- []  // empty list
	foo <- ['b', 'a', 'r']
	list2 <- list(26)  // list of size 26

Dictionaries are created using braces: >

	dict1 <- {}  // empty dictionary
	foo <- {b: 2, a: 1, r: 18}

Both lists and dictionaries are heterogeneous: they can contain values of all
types.

2.5 Comments ~
							 *pseudocode-comments*
Sometimes, even pseudocode cannot be perfectly transparent with its ideas.
Comments are useful in these cases.

The use of comments is like that in programming languages: comments should be
placed closest to the statements they refer (preferably on the same line;
otherwise, before the statements), and they must be preceded with a comment
symbol. What symbol used is preference. Any symbol can be used so long as it
is not reserved nor significant in the pseudocode. This pseudocode style uses
the comment symbol used in C++: two sequential forward slashes (//).

==============================================================================
3. Sample pseudocode					*pseudocode-sample*

/* Prints the following output:
Hello, world!
1 1 2 3 5 -- Median: 6.5 -- 8 13 21 34 55
abcdefghijklmnopqrstuvwxyz
 */
procedure main()
	str <- "Hello, world!"
	for char c in str do
		printf "%c" c
	end for
	echo

	fibseq <- [ 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ]

	// The # in this context is a unary operator meaning "length of"
	for i <- 0 to #fibseq - 1 do
		if i = #fibseq / 2 then
			printf "-- Median: "
			if #fibseq is odd then
				printf "%d -- " fibseq[i]
			else
				printf "%.1f -- "
					(fibseq[i-1] + fibseq[i]) / 2.0
				printf "%d " fibseq[i]
			end if
		else
			printf "%d " fibseq[i]
		end if
	end for
	echo

	// Characters are treated identically as those in C
	alpha <- 'a'
	while 'a' <= alpha and alpha <= 'z' do
		printf "%c" c
		alpha <- alpha + 1
	end while
	echo
end procedure

 vim:tw=78:isk=!-~,^*,^\|,^\":ts=8:noet:ft=help:norl:
